// Code generated by mockery v2.30.1. DO NOT EDIT.

package repomock

import (
	context "context"

	cdom "github.com/mrpandey/gobp/src/internal/core/domain/common"

	fdom "github.com/mrpandey/gobp/src/internal/core/domain/furniture"

	mock "github.com/stretchr/testify/mock"
)

// FurnitureRepoInterface is an autogenerated mock type for the FurnitureRepoInterface type
type FurnitureRepoInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, name, typ
func (_m *FurnitureRepoInterface) Create(ctx context.Context, name string, typ fdom.FurnitureType) (uint, error) {
	ret := _m.Called(ctx, name, typ)

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, fdom.FurnitureType) (uint, error)); ok {
		return rf(ctx, name, typ)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, fdom.FurnitureType) uint); ok {
		r0 = rf(ctx, name, typ)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, fdom.FurnitureType) error); ok {
		r1 = rf(ctx, name, typ)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *FurnitureRepoInterface) GetByID(ctx context.Context, id uint) (*fdom.FurnitureRecord, error) {
	ret := _m.Called(ctx, id)

	var r0 *fdom.FurnitureRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*fdom.FurnitureRecord, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *fdom.FurnitureRecord); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fdom.FurnitureRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithTx provides a mock function with given fields: tm
func (_m *FurnitureRepoInterface) WithTx(tm cdom.TxnManagerInterface) fdom.FurnitureRepoInterface {
	ret := _m.Called(tm)

	var r0 fdom.FurnitureRepoInterface
	if rf, ok := ret.Get(0).(func(cdom.TxnManagerInterface) fdom.FurnitureRepoInterface); ok {
		r0 = rf(tm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fdom.FurnitureRepoInterface)
		}
	}

	return r0
}

// NewFurnitureRepoInterface creates a new instance of FurnitureRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFurnitureRepoInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *FurnitureRepoInterface {
	mock := &FurnitureRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
