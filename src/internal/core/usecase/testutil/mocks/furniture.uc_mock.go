// Code generated by mockery v2.30.1. DO NOT EDIT.

package ucmock

import (
	context "context"

	fdom "github.com/mrpandey/gobp/src/internal/core/domain/furniture"
	mock "github.com/stretchr/testify/mock"
)

// FurnitureUseCaseInterface is an autogenerated mock type for the FurnitureUseCaseInterface type
type FurnitureUseCaseInterface struct {
	mock.Mock
}

// AddFurniture provides a mock function with given fields: ctx, req
func (_m *FurnitureUseCaseInterface) AddFurniture(ctx context.Context, req *fdom.AddFurnitureRequest) (*fdom.FurnitureID, error) {
	ret := _m.Called(ctx, req)

	var r0 *fdom.FurnitureID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fdom.AddFurnitureRequest) (*fdom.FurnitureID, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fdom.AddFurnitureRequest) *fdom.FurnitureID); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fdom.FurnitureID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fdom.AddFurnitureRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFurniture provides a mock function with given fields: ctx, req
func (_m *FurnitureUseCaseInterface) GetFurniture(ctx context.Context, req *fdom.FurnitureID) (*fdom.FurnitureRecord, error) {
	ret := _m.Called(ctx, req)

	var r0 *fdom.FurnitureRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fdom.FurnitureID) (*fdom.FurnitureRecord, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fdom.FurnitureID) *fdom.FurnitureRecord); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fdom.FurnitureRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fdom.FurnitureID) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFurnitureUseCaseInterface creates a new instance of FurnitureUseCaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFurnitureUseCaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *FurnitureUseCaseInterface {
	mock := &FurnitureUseCaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
